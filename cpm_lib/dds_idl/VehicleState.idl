// MIT License
// 
// Copyright (c) 2020 Lehrstuhl Informatik 11 - RWTH Aachen University
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is part of cpm_lab.
// 
// Author: i11 - Embedded Software, RWTH Aachen University

#include "Header.idl"
#include "Pose2D.idl"

#ifndef VEHICLESTATE_IDL
#define VEHICLESTATE_IDL

/**
 * \struct VehicleState
 * \brief Provides calibrated vehicle sensor data.
 * \ingroup cpmlib_idl
 */
struct VehicleState {
    //! ID of the vehicle that sends this message
    octet vehicle_id; //@key

    //! Header information
    Header _header;

    /**
     * \brief The pose combines data from the IMU, odometer and the IPS
     * to give an estimate of the vehicle position and orientation.
     */
    Pose2D pose;

    /**
     * \brief Elapsed time since the last pose update from the IPS.
     * For a value greater than 10,000,000,000 the pose should be
     * regarded as unreliable.
     */
    unsigned long long IPS_update_age_nanoseconds;

    double odometer_distance;                         //!< meter
    double imu_acceleration_forward;                  //!< m/s^2
    double imu_acceleration_left;                     //!< m/s^2
    double imu_acceleration_up;                       //!< m/s^2
    double imu_yaw;                                   //!< radian, unfiltered yaw signal from IMU
    double imu_yaw_rate;                              //!< radian per second
    double speed;                                     //!< m/s
    double battery_voltage;                           //!< volt
    double motor_current;                             //!< ampere

    double motor_throttle;                            //!< dimensionless, in [-1, 1], control command determined by the mid level controller
    double steering_servo;                            //!< dimensionless, in [-1, 1], control command determined by the mid level controller

    /**
     * \brief
     * The lab control center is, without this variable, unable to differentiate between signals from a simulated and from a real vehicle
     */
    boolean is_real;
};
#endif