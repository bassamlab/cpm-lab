// MIT License
// 
// Copyright (c) 2020 Lehrstuhl Informatik 11 - RWTH Aachen University
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is part of cpm_lab.
// 
// Author: i11 - Embedded Software, RWTH Aachen University

#include "Header.idl"
#include "Pose2D.idl"
#include "CommonroadDDSShape.idl"

#ifndef COMMONROAD_OBSTACLE_IDL
#define COMMONROAD_OBSTACLE_IDL

/**
 * \enum ObstacleType
 * \brief Possible types of obstacles, e.g. car or bicycle
 * \ingroup cpmlib_idl
 */
enum ObstacleType 
{
    //Dynamic
    Unknown,
    Car, 
    Truck, 
    Bus, 
    Motorcycle, 
    Bicycle, 
    Pedestrian, 
    PriorityVehicle, 
    Train,
    Taxi,
    //Static
    ParkedVehicle, 
    ConstructionZone, 
    RoadBoundary,
    //Environment
    Building,
    Pillar,
    MedianStrip
}; //Contains types of all obstacle types (dynamic, static, environment)

/**
 * \enum ObstacleClass
 * \brief Describes which obstacle class (w.r.t. Commonroad) an obstacle belongs to: Dynamic, Static, Environment
 * \ingroup cpmlib_idl
 */
enum ObstacleClass
{
    Dynamic,
    Static,
    Environment
};

/**
 * \struct CommonroadObstacle
 * \brief Provides data for simulated commonroad obstacles
 * \ingroup cpmlib_idl
 */
struct CommonroadObstacle {
    //! An ID can be set for each obstacle
    octet vehicle_id; //@key

    Header _header; //!< There is no need to distinguish between create and valid after stamp in this case

    boolean is_moving; //!< Shows whether the obstacle is moving or not (moving /= dynamic or static obstacle, some obstacles are defined as dynamic but do not move)

    //! Pose contains vehicle orientation and position, but these values must not be exact
    Pose2D pose;

    //! Tells if values in pose are exact or only average values
    boolean pose_is_exact;

    //! The type of obstacle, e.g. car
    ObstacleType type;

    //! The obstacle class the obstacle belongs to (dynamic, static, environment)
    ObstacleClass obstacle_class;

    //! Optional value which defines a shape, especially useful if the occupancy type was used. But: also useful for visualizing lanelet references or inexact positional values
    CommonroadDDSShape shape; 

    double speed; //!< Speed in m/s
};
#endif