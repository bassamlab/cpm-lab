// MIT License
// 
// Copyright (c) 2020 Lehrstuhl Informatik 11 - RWTH Aachen University
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is part of cpm_lab.
// 
// Author: i11 - Embedded Software, RWTH Aachen University

#include "Color.idl"
#include "Point2D.idl"

#ifndef VISUALIZATION_IDL
#define VISUALIZATION_IDL

/**
 * \enum VisualizationType
 * \brief Types of visualization that can be drawn, e.g. line or circle
 * \ingroup cpmlib_idl
 */
enum VisualizationType 
{
    LineStrips,
    Polygon,
    StringMessage,
    FilledCircle //Center at points[0]
};

/**
 * \enum StringMessageAnchor
 * \brief Where the string should be oriented w.r.t. the defined position, e.g. left or right
 * \ingroup cpmlib_idl
 */
enum StringMessageAnchor
{
    BottomLeft,
    BottomCenter,
    BottomRight,
    CenterLeft,
    Center,
    CenterRight,
    TopLeft,
    TopCenter,
    TopRight
};

/**
 * \struct Visualization
 * \brief Data type for visualizing / drawing on the LCC's map view
 * \ingroup cpmlib_idl
 */
struct Visualization 
{
    //!Id to be able to delete the viz later on; received messages are drawn in order of the IDs, so you can draw them on top of each other
    unsigned long long id; //@key

    //!Type of visualization
    VisualizationType type;

    //!Time after which the message is deleted automatically
    unsigned long long time_to_live;

    //!Point(s) to draw / positions where to draw (position of text, center of circle, corners of polygon...)
    sequence<Point2D> points;

    //!Line width, text size, circle radius...
    double size; //Line width in pixels or text size in pt

    //!Message content if the type is string
    string string_message;

    //!How to align a string message
    StringMessageAnchor string_message_anchor; //Align

    //!Color of the drawing
    Color _color;
};
#endif